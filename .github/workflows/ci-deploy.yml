name: CI-CD

on:
  push:
    branches: [ master ]

permissions:
  id-token: write
  contents: write

jobs:
  # ────────────────────────────────────────────────────────────────────────────────
  # 1. BUILD  ─ bump minor → build Jar → upload to S3
  # ────────────────────────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump.outputs.new_version }}
      jar-key: ${{ steps.upload.outputs.s3_key }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # --- 1.1 bump minor version & commit it back -----------------------------
      - name: Bump minor version
        id: bump
        run: |
          FILE=build.gradle     # or gradle.properties
          # extract current version '1.12.0'
          CUR=$(grep -Eo "version\\s*=\\s*'[^']+'" "$FILE" | cut -d"'" -f2)
          MAJOR=${CUR%%.*}
          MINOR=${CUR#"$MAJOR."}
          MINOR=${MINOR%%.*}
          NEW_MINOR=$((MINOR+1))
          NEW="$MAJOR.$NEW_MINOR.0"
          echo "🔖 bump $CUR ➜ $NEW"
          
          # update file
          sed -i -E "s/version\\s*=\\s*'[^']+'$/version = '$NEW'/" "$FILE"
          
          # export for later steps
          echo "new_version=$NEW" >>"$GITHUB_OUTPUT"
          
          # commit
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "ci: bump version to $NEW"
          git push
      # -------------------------------------------------------------------------

      - name: Locate built JAR
        id: jar
        run: |
          JAR=$(find . -path "*/build/libs/*.jar" -name "*${{ steps.bump.outputs.new_version }}.jar" | head -n1)
          echo "JAR=$JAR"
          echo "jar_path=$JAR" >> "$GITHUB_OUTPUT"

      - name: Male wrapper executable
        run: chmod +x ./gradlew

        # --- 1.2 upload jar with version in key ----------------------------------
      - uses: aws-actions/configure-aws-credentials@v4
        with:
         role-to-assume: arn:aws:iam::805598450555:role/github-ci-deploy
         aws-region: eu-north-1

      - name: Upload JAR to S3
        id: upload
        run: |
          KEY="myapp-${{ steps.bump.outputs.new_version }}.jar"
          aws s3 cp "${{ steps.jar.outputs.jar_path }}" \
                   "s3://service-aggregator-artifacts/$KEY" \
                   --metadata "latest=true"
          echo "s3_key=$KEY" >>"$GITHUB_OUTPUT"

  # ────────────────────────────────────────────────────────────────────────────────
  # 2. DEPLOY  ─ pull that jar onto EC2 via SSM
  # ────────────────────────────────────────────────────────────────────────────────
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::805598450555:role/github-ci-deploy
          aws-region: eu-north-1
      - name: Replace JAR on EC2 via SSM
        run: |
          aws ssm send-command \
            --instance-ids i-07aca7d569f55d118 \
            --document-name 'AWS-RunShellScript' \
            --comment "Deploy build ${{ needs.build.outputs.new-version }}" \
            --parameters commands="\
              cd /opt/springapp && \
              aws s3 cp s3://service-aggregator-artifacts/${{ needs.build.outputs.jar-key }} app.jar && \
              sudo systemctl restart springapp \

  # ────────────────────────────────────────────────────────────────────────────────
  # 3. SMOKE TEST  & 4. DOC CHECK (unchanged, now use new version)
  # ────────────────────────────────────────────────────────────────────────────────
  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait until /actuator/health is UP
        timeout-minutes: 2
        run: |
          for i in {1..30}; do
            if curl -fs https://aggregator.duckdns.org/actuator/health | grep -q '"UP"'; then
              echo "Service is healthy ✅"
              exit 0
            fi
            echo "Waiting for service…"
            sleep 4
          done
          echo "Health check failed ❌"
          exit 1

  doc-check:
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - run: curl --fail -s https://aggregator.duckdns.org/v3/api-docs >/dev/null
